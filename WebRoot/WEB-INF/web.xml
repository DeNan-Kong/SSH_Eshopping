<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
  <display-name>SSH_shopping</display-name>
  
  <welcome-file-list>
    <welcome-file>index.jsp</welcome-file>
  </welcome-file-list>
  
  <!-- spring用于解决懒加载问题的过滤器 
  <filter>
      <filter-name>OpenSessionInViewFilter</filter-name>
      <filter-class>org.springframework.orm.hibernate4.support.OpenSessionInViewFilter</filter-class>
  </filter>  
  <filter-mapping>
      <filter-name>OpenSessionInViewFilter</filter-name>
      <url-pattern>*.action</url-pattern>
  </filter-mapping>
  -->   
  <!-- 页面过滤器  -->
  <filter>
  	<filter-name>UserFilter</filter-name>
  	<filter-class>com.shop.filter.UserFilter</filter-class>
  </filter>
  <filter-mapping>
  	<filter-name>UserFilter</filter-name>
  	<url-pattern>/user/*</url-pattern>
  </filter-mapping>
  <!-- struts2过滤器，FilterDispatcher是控制器的核心，就是mvc中c控制层的核心 -->
  <!-- FilterDispatcher是struts2.0.x到2.1.2版本的核心过滤器.! 
	trutsPrepareAndExecuteFilter是自2.1.3开始就替代了FilterDispatcher的 -->   
  <filter>
    <filter-name>struts2</filter-name>
    <filter-class>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter</filter-class>
  </filter>
  
  <filter-mapping>
    <filter-name>struts2</filter-name>
    <url-pattern>*.action</url-pattern>
  </filter-mapping>
  
  <!-- 配置监听器ContextLoaderListener，这样在服务器启动的时候就可以加载Spring的配置文件了,web.xml中监听器的启动优先级要高于过滤器 -->  
  <listener>  
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>  
  </listener>
      
  <context-param>  
    <param-name>contextConfigLocation</param-name>    
    <param-value>classpath:beans.xml</param-value><!-- 匹配在src目录下的xml文件 -->
  </context-param>
  <!-- 配置自己的监听器 -->
  <listener>
  	<listener-class>com.shop.listener.InitDataListener</listener-class>
  </listener> 
</web-app>